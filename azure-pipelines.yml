trigger:
  branches:
    include:
      - master
  paths:
    include:
      - backend/**
      - frontend/**
      - azure-pipelines.yml
      - gitversion.yml

variables:
  - group: 'build args'
  - group: 'dockerhub'

pool:
  name: 'SelfHosted'

stages:
  - stage: build_and_push
    displayName: Build & Push
    jobs:

      # GitVersion (Docker)
      - job: init
        displayName: Init (GitVersion)
        steps:
          - checkout: self
            fetchDepth: 0

          - bash: |
              set -Eeuo pipefail
              echo "Using GitTools GitVersion 6.4.0 (Docker)"
              docker pull gittools/gitversion:6.4.0

              REPO_DIR="$(Build.SourcesDirectory)"
              echo "Repo dir: $REPO_DIR"
              test -f "$REPO_DIR/gitversion.yml" && echo "Found gitversion.yml" || echo "No gitversion.yml"

              echo "GitVersion /showconfig (effective config):"
              docker run --rm -v "$REPO_DIR":/repo gittools/gitversion:6.4.0 \
                /repo /showconfig || true

              echo "Calculate SemVer..."
              OUT="$(docker run --rm -v "$REPO_DIR":/repo gittools/gitversion:6.4.0 \
                      /repo -config /repo/gitversion.yml -output json -showvariable SemVer 2>&1)"
              RC=$?
              echo "$OUT"
              if [ $RC -ne 0 ] || [ -z "$OUT" ]; then
                echo "GitVersion failed (rc=$RC). Dumping diagnostics:"
                docker run --rm -v "$REPO_DIR":/repo gittools/gitversion:6.4.0 /repo -output json || true
                exit ${RC:-1}
              fi

              SEMVER="$OUT"
              echo "SemVer=$SEMVER"
              # экспорт как output-переменная шага 'setver'
              echo "##vso[task.setvariable variable=APP_VERSION;isOutput=true]$SEMVER"
            name: setver
            displayName: GitVersion (Docker) → APP_VERSION

######### BACKEND #########
      - job: backend
        displayName: Backend image
        dependsOn: init
        variables:
          APP_VERSION: $[ dependencies.init.outputs['setver.APP_VERSION'] ]
        steps:
          - checkout: self
            fetchDepth: 0

          # docker hub login
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'

          # build docker images (backend)
          - bash: |
              set -euo pipefail
              echo "Building BACKEND $(APP_VERSION)"
              docker build \
                -t $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):$(APP_VERSION) \
                -t $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):latest \
                backend
            displayName: Docker build1

          # push backend latest + version
          - bash: |
              set -euo pipefail
              echo "Pushing BACKEND image ($(APP_VERSION))"
              docker push $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):$(APP_VERSION)
              docker push $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):latest
            displayName: Docker push

######### FRONTEND #########
      - job: frontend
        displayName: Frontend image
        dependsOn: init
        variables:
          APP_VERSION: $[ dependencies.init.outputs['setver.APP_VERSION'] ]
        steps:
          - checkout: self
            fetchDepth: 0

          # check REACT_APP_API_BASE_URL var
          - bash: |
              set -euo pipefail
              : "${REACT_APP_API_BASE_URL:?REACT_APP_API_BASE_URL is required}"
              echo "REACT_APP_API_BASE_URL is provided"
            displayName: Validate frontend build args
            env:
              REACT_APP_API_BASE_URL: $(REACT_APP_API_BASE_URL)

          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'

          # build frontend with args
          - bash: |
              set -euo pipefail
              echo "Building FRONTEND $(APP_VERSION)"
              docker build \
                --build-arg REACT_APP_VERSION=$(APP_VERSION) \
                --build-arg REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL) \
                -t $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):$(APP_VERSION) \
                -t $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):latest \
                frontend
            displayName: Docker build
            env:
              REACT_APP_API_BASE_URL: $(REACT_APP_API_BASE_URL)

          # push frontend latest + version
          - bash: |
              set -euo pipefail
              echo "Pushing FRONTEND image ($(APP_VERSION))"
              docker push $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):$(APP_VERSION)
              docker push $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):latest
            displayName: Docker push
