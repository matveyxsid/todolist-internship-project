trigger:
  branches:
    include:
      - master
  paths:
    include:
      - backend/**
      - frontend/**
      - azure-pipelines.yml
      - gitversion.yml

variables:
  - group: 'build args'
  - group: 'dockerhub'

pool:
  name: 'SelfHosted'

stages:
  - stage: build_and_push
    displayName: Build & Push
    jobs:

      # GitVersion (Docker)
      - job: init
        displayName: GitVersion (Docker)
        steps:
          - checkout: self
            fetchDepth: 0

          - bash: |
              set -euo pipefail
              docker pull gittools/gitversion:6.4.0

              REPO_DIR="$(Build.SourcesDirectory)"
              echo "Calculate SemVer..."
              SEMVER="$(docker run --rm -v "$REPO_DIR":/repo gittools/gitversion:6.4.0 \
                        /repo /config /repo/gitversion.yml /showvariable SemVer)"
              echo "SemVer=$SEMVER"

              # output
              echo "##vso[task.setvariable variable=APP_VERSION;isOutput=true]$SEMVER"
            name: setver
            displayName: GitVersion (Docker)

      ######### BACKEND TEST #########
      - job: test_backend
        displayName: Backend tests
        dependsOn: init
        pool:
          name: 'SelfHosted'
        steps:
          - checkout: self
            fetchDepth: 0

          # use python 3.9
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.9'
              addToPath: true

          - bash: |
              set -euo pipefail
              cd backend
              python -m venv venv
              source venv/bin/activate
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              # pytest httpx for test
              pip install pytest httpx
              pytest -v --junitxml=pytest-report.xml
            displayName: Run pytest

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'backend/pytest-report.xml'
              failTaskOnFailedTests: true
            displayName: Publish test report

      ######### BACKEND #########
      - job: backend
        displayName: Backend image
        dependsOn:
          - init
          - test_backend
        variables:
          APP_VERSION: $[ dependencies.init.outputs['setver.APP_VERSION'] ]
        steps:
          - checkout: self
            fetchDepth: 0

          # docker hub login
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'

          # build docker images (backend)
          - bash: |
              set -euo pipefail
              echo "Building BACKEND $(APP_VERSION)"
              docker build \
                -t $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):$(APP_VERSION) \
                -t $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):latest \
                backend
            displayName: Docker build1

          # push backend latest + version
          - bash: |
              set -euo pipefail
              echo "Pushing BACKEND image ($(APP_VERSION))"
              docker push $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):$(APP_VERSION)
              docker push $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):latest
            displayName: Docker push

######### FRONTEND #########
      - job: frontend
        displayName: Frontend image
        dependsOn:
          - init
          - test_backend
        variables:
          APP_VERSION: $[ dependencies.init.outputs['setver.APP_VERSION'] ]
        steps:
          - checkout: self
            fetchDepth: 0

          # check REACT_APP_API_BASE_URL var
          - bash: |
              set -euo pipefail
              : "${REACT_APP_API_BASE_URL:?REACT_APP_API_BASE_URL is required}"
              echo "REACT_APP_API_BASE_URL is provided"
            displayName: Validate frontend build args
            env:
              REACT_APP_API_BASE_URL: $(REACT_APP_API_BASE_URL)

          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'

          # build frontend with args
          - bash: |
              set -euo pipefail
              echo "Building FRONTEND $(APP_VERSION)"
              docker build \
                --build-arg REACT_APP_VERSION=$(APP_VERSION) \
                --build-arg REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL) \
                -t $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):$(APP_VERSION) \
                -t $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):latest \
                frontend
            displayName: Docker build
            env:
              REACT_APP_API_BASE_URL: $(REACT_APP_API_BASE_URL)

          # push frontend latest + version
          - bash: |
              set -euo pipefail
              echo "Pushing FRONTEND image ($(APP_VERSION))"
              docker push $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):$(APP_VERSION)
              docker push $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):latest
            displayName: Docker push
