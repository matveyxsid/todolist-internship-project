trigger:
  branches:
    include:
      - master
  paths:
    include:
      - backend/**
      - frontend/**
      - azure-pipelines.yml
      - gitversion.yml

variables:
  - group: 'build args'     # тут оставь ТОЛЬКО REACT_APP_API_BASE_URL
  - group: 'dockerhub'      # твой Service Connection 'DockerHub' остаётся

pool:
  name: 'SelfHosted'

stages:
  - stage: build_and_push
    displayName: Build & Push
    jobs:

######### INIT: версия через GitVersion (Docker) #########
      - job: init
        displayName: Resolve version via GitVersion (Docker)
        steps:
          - checkout: self
            fetchDepth: 0

          - bash: |
              set -euo pipefail
              set -x

              # 0) Docker доступен?
              if ! docker info >/dev/null 2>&1; then
                echo "ERROR: Docker daemon is not reachable from this job."
                docker --version || true
                whoami; id; groups
                command -v systemctl >/dev/null && systemctl status docker -n 50 || true
                exit 1
              fi

              # 1) подтянуть теги (GitVersion их использует)
              git fetch --tags --force

              # 2) образ GitVersion
              docker pull gittools/gitversion:5.12.0 || true

              REPO_DIR="$(Build.SourcesDirectory)"
              test -d "$REPO_DIR/.git" || { echo "ERROR: .git not found in $REPO_DIR"; ls -la "$REPO_DIR"; exit 1; }

              # 3) считаем SemVer
              echo "Calculate SemVer..."
              SEMVER="$(docker run --rm -v "$REPO_DIR":/repo gittools/gitversion:5.12.0 \
                        /repo /config /repo/gitversion.yml /showvariable SemVer)"
              echo "SemVer=$SEMVER"

              # 4) считаем PreReleaseTag (может быть пустым)
              echo "Calculate PreReleaseTag..."
              PRERELEASE="$(docker run --rm -v "$REPO_DIR":/repo gittools/gitversion:5.12.0 \
                             /repo /config /repo/gitversion.yml /showvariable PreReleaseTag || true)"
              echo "PreReleaseTag=${PRERELEASE:-<empty>}"

              # 5) отдаём как outputs
              echo "##vso[task.setvariable variable=APP_VERSION;isOutput=true]$SEMVER"
              echo "##vso[task.setvariable variable=PRERELEASE;isOutput=true]$PRERELEASE"
            name: setver
            displayName: Run GitVersion in Docker (with diagnostics)

######### BACKEND #########
      - job: backend
        displayName: Backend image
        dependsOn: init
        variables:
          APP_VERSION: $[ dependencies.init.outputs['setver.APP_VERSION'] ]
          PRERELEASE:  $[ dependencies.init.outputs['setver.PRERELEASE'] ]
        steps:
          - checkout: self
            fetchDepth: 0

          # docker hub login
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'

          # build docker image (backend)
          - bash: |
              set -euo pipefail
              echo "Building BACKEND $(APP_VERSION)"
              docker build \
                --build-arg BACKEND_VERSION=$(APP_VERSION) \
                --label org.opencontainers.image.version=$(APP_VERSION) \
                --label org.opencontainers.image.revision=$(Build.SourceVersion) \
                -t $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):$(APP_VERSION) \
                -t $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):latest \
                backend
            displayName: Docker build (backend)

          # push :version
          - bash: |
              set -euo pipefail
              echo "Pushing BACKEND image ($(APP_VERSION))"
              docker push $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):$(APP_VERSION)
            displayName: Docker push (backend :version)

          # push :latest — только для релизов
          - bash: |
              set -euo pipefail
              echo "Pushing BACKEND image (:latest)"
              docker push $(DOCKERHUB_NAMESPACE)/$(BACKEND_REPO):latest
            displayName: Docker push (backend :latest)
            condition: and(succeeded(), eq(variables['PRERELEASE'], ''))

######### FRONTEND #########
      - job: frontend
        displayName: Frontend image
        dependsOn: init
        variables:
          APP_VERSION: $[ dependencies.init.outputs['setver.APP_VERSION'] ]
          PRERELEASE:  $[ dependencies.init.outputs['setver.PRERELEASE'] ]
        steps:
          - checkout: self
            fetchDepth: 0

          # check REACT_APP_API_BASE_URL var
          - bash: |
              set -euo pipefail
              : "${REACT_APP_API_BASE_URL:?REACT_APP_API_BASE_URL is required}"
              echo "REACT_APP_API_BASE_URL is provided"
            displayName: Validate frontend build args
            env:
              REACT_APP_API_BASE_URL: $(REACT_APP_API_BASE_URL)

          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'

          # build frontend with args
          - bash: |
              set -euo pipefail
              echo "Building FRONTEND $(APP_VERSION)"
              docker build \
                --build-arg REACT_APP_VERSION=$(APP_VERSION) \
                --build-arg REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL) \
                --label org.opencontainers.image.version=$(APP_VERSION) \
                --label org.opencontainers.image.revision=$(Build.SourceVersion) \
                -t $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):$(APP_VERSION) \
                -t $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):latest \
                frontend
            displayName: Docker build (frontend)
            env:
              REACT_APP_API_BASE_URL: $(REACT_APP_API_BASE_URL)

          # push :version
          - bash: |
              set -euo pipefail
              echo "Pushing FRONTEND image ($(APP_VERSION))"
              docker push $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):$(APP_VERSION)
            displayName: Docker push (frontend :version)

          # push :latest — только для релизов
          - bash: |
              set -euo pipefail
              echo "Pushing FRONTEND image (:latest)"
              docker push $(DOCKERHUB_NAMESPACE)/$(FRONTEND_REPO):latest
            displayName: Docker push (frontend :latest)
            condition: and(succeeded(), eq(variables['PRERELEASE'], ''))
